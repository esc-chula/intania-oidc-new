// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v4.23.4
// source: intania/auth/policy/v1/policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { FieldMask } from "../../../../google/protobuf/field_mask";

export const protobufPackage = "intania.auth.policy.v1";

export enum PolicyOwner {
  POLICY_OWNER_UNSPECIFIED = 0,
  POLICY_OWNER_ACCOUNT = 1,
  UNRECOGNIZED = -1,
}

export function policyOwnerFromJSON(object: any): PolicyOwner {
  switch (object) {
    case 0:
    case "POLICY_OWNER_UNSPECIFIED":
      return PolicyOwner.POLICY_OWNER_UNSPECIFIED;
    case 1:
    case "POLICY_OWNER_ACCOUNT":
      return PolicyOwner.POLICY_OWNER_ACCOUNT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PolicyOwner.UNRECOGNIZED;
  }
}

export function policyOwnerToJSON(object: PolicyOwner): string {
  switch (object) {
    case PolicyOwner.POLICY_OWNER_UNSPECIFIED:
      return "POLICY_OWNER_UNSPECIFIED";
    case PolicyOwner.POLICY_OWNER_ACCOUNT:
      return "POLICY_OWNER_ACCOUNT";
    case PolicyOwner.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PolicyAction {
  POLICY_ACTION_UNSPECIFIED = 0,
  POLICY_ACTION_ALL = 1,
  POLICY_ACTION_READ = 11,
  POLICY_ACTION_WRITE = 12,
  POLICY_ACTION_READ_WITH_GRANT = 13,
  POLICY_ACTION_WRITE_WITH_GRANT = 14,
  UNRECOGNIZED = -1,
}

export function policyActionFromJSON(object: any): PolicyAction {
  switch (object) {
    case 0:
    case "POLICY_ACTION_UNSPECIFIED":
      return PolicyAction.POLICY_ACTION_UNSPECIFIED;
    case 1:
    case "POLICY_ACTION_ALL":
      return PolicyAction.POLICY_ACTION_ALL;
    case 11:
    case "POLICY_ACTION_READ":
      return PolicyAction.POLICY_ACTION_READ;
    case 12:
    case "POLICY_ACTION_WRITE":
      return PolicyAction.POLICY_ACTION_WRITE;
    case 13:
    case "POLICY_ACTION_READ_WITH_GRANT":
      return PolicyAction.POLICY_ACTION_READ_WITH_GRANT;
    case 14:
    case "POLICY_ACTION_WRITE_WITH_GRANT":
      return PolicyAction.POLICY_ACTION_WRITE_WITH_GRANT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PolicyAction.UNRECOGNIZED;
  }
}

export function policyActionToJSON(object: PolicyAction): string {
  switch (object) {
    case PolicyAction.POLICY_ACTION_UNSPECIFIED:
      return "POLICY_ACTION_UNSPECIFIED";
    case PolicyAction.POLICY_ACTION_ALL:
      return "POLICY_ACTION_ALL";
    case PolicyAction.POLICY_ACTION_READ:
      return "POLICY_ACTION_READ";
    case PolicyAction.POLICY_ACTION_WRITE:
      return "POLICY_ACTION_WRITE";
    case PolicyAction.POLICY_ACTION_READ_WITH_GRANT:
      return "POLICY_ACTION_READ_WITH_GRANT";
    case PolicyAction.POLICY_ACTION_WRITE_WITH_GRANT:
      return "POLICY_ACTION_WRITE_WITH_GRANT";
    case PolicyAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PolicyObject {
  POLICY_OBJECT_UNSPECIFIED = 0,
  POLICY_OBJECT_STUDENT = 11,
  UNRECOGNIZED = -1,
}

export function policyObjectFromJSON(object: any): PolicyObject {
  switch (object) {
    case 0:
    case "POLICY_OBJECT_UNSPECIFIED":
      return PolicyObject.POLICY_OBJECT_UNSPECIFIED;
    case 11:
    case "POLICY_OBJECT_STUDENT":
      return PolicyObject.POLICY_OBJECT_STUDENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PolicyObject.UNRECOGNIZED;
  }
}

export function policyObjectToJSON(object: PolicyObject): string {
  switch (object) {
    case PolicyObject.POLICY_OBJECT_UNSPECIFIED:
      return "POLICY_OBJECT_UNSPECIFIED";
    case PolicyObject.POLICY_OBJECT_STUDENT:
      return "POLICY_OBJECT_STUDENT";
    case PolicyObject.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetPolicyRequest {
  id: string;
}

export interface GetPolicyResponse {
  policy: Policy | undefined;
}

export interface ListPolicyRequest {
}

export interface ListPolicyResponse {
  policies: Policy[];
}

export interface EditPolicyRequest {
  id: string;
  masks: string[] | undefined;
}

export interface EditPolicyResponse {
}

export interface AttachPolicyRequest {
  ownerType: PolicyOwner;
  ownerId: string;
  action: PolicyAction;
  objectType: PolicyObject;
  objectId: string;
}

export interface AttachPolicyResponse {
}

export interface Policy {
  ownerType: PolicyOwner;
  ownerId: string;
  action: PolicyAction;
  objectType: PolicyObject;
  objectId: string;
}

function createBaseGetPolicyRequest(): GetPolicyRequest {
  return { id: "" };
}

export const GetPolicyRequest: MessageFns<GetPolicyRequest> = {
  encode(message: GetPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetPolicyRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPolicyRequest>, I>>(base?: I): GetPolicyRequest {
    return GetPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPolicyRequest>, I>>(object: I): GetPolicyRequest {
    const message = createBaseGetPolicyRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetPolicyResponse(): GetPolicyResponse {
  return { policy: undefined };
}

export const GetPolicyResponse: MessageFns<GetPolicyResponse> = {
  encode(message: GetPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== undefined) {
      Policy.encode(message.policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policy = Policy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyResponse {
    return { policy: isSet(object.policy) ? Policy.fromJSON(object.policy) : undefined };
  },

  toJSON(message: GetPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== undefined) {
      obj.policy = Policy.toJSON(message.policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPolicyResponse>, I>>(base?: I): GetPolicyResponse {
    return GetPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPolicyResponse>, I>>(object: I): GetPolicyResponse {
    const message = createBaseGetPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? Policy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseListPolicyRequest(): ListPolicyRequest {
  return {};
}

export const ListPolicyRequest: MessageFns<ListPolicyRequest> = {
  encode(_: ListPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListPolicyRequest {
    return {};
  },

  toJSON(_: ListPolicyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPolicyRequest>, I>>(base?: I): ListPolicyRequest {
    return ListPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPolicyRequest>, I>>(_: I): ListPolicyRequest {
    const message = createBaseListPolicyRequest();
    return message;
  },
};

function createBaseListPolicyResponse(): ListPolicyResponse {
  return { policies: [] };
}

export const ListPolicyResponse: MessageFns<ListPolicyResponse> = {
  encode(message: ListPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.policies) {
      Policy.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policies.push(Policy.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPolicyResponse {
    return {
      policies: globalThis.Array.isArray(object?.policies) ? object.policies.map((e: any) => Policy.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListPolicyResponse): unknown {
    const obj: any = {};
    if (message.policies?.length) {
      obj.policies = message.policies.map((e) => Policy.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPolicyResponse>, I>>(base?: I): ListPolicyResponse {
    return ListPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPolicyResponse>, I>>(object: I): ListPolicyResponse {
    const message = createBaseListPolicyResponse();
    message.policies = object.policies?.map((e) => Policy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEditPolicyRequest(): EditPolicyRequest {
  return { id: "", masks: undefined };
}

export const EditPolicyRequest: MessageFns<EditPolicyRequest> = {
  encode(message: EditPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.masks !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.masks), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.masks = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditPolicyRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      masks: isSet(object.masks) ? FieldMask.unwrap(FieldMask.fromJSON(object.masks)) : undefined,
    };
  },

  toJSON(message: EditPolicyRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.masks !== undefined) {
      obj.masks = FieldMask.toJSON(FieldMask.wrap(message.masks));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditPolicyRequest>, I>>(base?: I): EditPolicyRequest {
    return EditPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditPolicyRequest>, I>>(object: I): EditPolicyRequest {
    const message = createBaseEditPolicyRequest();
    message.id = object.id ?? "";
    message.masks = object.masks ?? undefined;
    return message;
  },
};

function createBaseEditPolicyResponse(): EditPolicyResponse {
  return {};
}

export const EditPolicyResponse: MessageFns<EditPolicyResponse> = {
  encode(_: EditPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EditPolicyResponse {
    return {};
  },

  toJSON(_: EditPolicyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EditPolicyResponse>, I>>(base?: I): EditPolicyResponse {
    return EditPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditPolicyResponse>, I>>(_: I): EditPolicyResponse {
    const message = createBaseEditPolicyResponse();
    return message;
  },
};

function createBaseAttachPolicyRequest(): AttachPolicyRequest {
  return { ownerType: 0, ownerId: "", action: 0, objectType: 0, objectId: "" };
}

export const AttachPolicyRequest: MessageFns<AttachPolicyRequest> = {
  encode(message: AttachPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerType !== 0) {
      writer.uint32(8).int32(message.ownerType);
    }
    if (message.ownerId !== "") {
      writer.uint32(18).string(message.ownerId);
    }
    if (message.action !== 0) {
      writer.uint32(24).int32(message.action);
    }
    if (message.objectType !== 0) {
      writer.uint32(32).int32(message.objectType);
    }
    if (message.objectId !== "") {
      writer.uint32(42).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ownerType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.objectType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.objectId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttachPolicyRequest {
    return {
      ownerType: isSet(object.ownerType) ? policyOwnerFromJSON(object.ownerType) : 0,
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      action: isSet(object.action) ? policyActionFromJSON(object.action) : 0,
      objectType: isSet(object.objectType) ? policyObjectFromJSON(object.objectType) : 0,
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: AttachPolicyRequest): unknown {
    const obj: any = {};
    if (message.ownerType !== 0) {
      obj.ownerType = policyOwnerToJSON(message.ownerType);
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.action !== 0) {
      obj.action = policyActionToJSON(message.action);
    }
    if (message.objectType !== 0) {
      obj.objectType = policyObjectToJSON(message.objectType);
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AttachPolicyRequest>, I>>(base?: I): AttachPolicyRequest {
    return AttachPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttachPolicyRequest>, I>>(object: I): AttachPolicyRequest {
    const message = createBaseAttachPolicyRequest();
    message.ownerType = object.ownerType ?? 0;
    message.ownerId = object.ownerId ?? "";
    message.action = object.action ?? 0;
    message.objectType = object.objectType ?? 0;
    message.objectId = object.objectId ?? "";
    return message;
  },
};

function createBaseAttachPolicyResponse(): AttachPolicyResponse {
  return {};
}

export const AttachPolicyResponse: MessageFns<AttachPolicyResponse> = {
  encode(_: AttachPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttachPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AttachPolicyResponse {
    return {};
  },

  toJSON(_: AttachPolicyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AttachPolicyResponse>, I>>(base?: I): AttachPolicyResponse {
    return AttachPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AttachPolicyResponse>, I>>(_: I): AttachPolicyResponse {
    const message = createBaseAttachPolicyResponse();
    return message;
  },
};

function createBasePolicy(): Policy {
  return { ownerType: 0, ownerId: "", action: 0, objectType: 0, objectId: "" };
}

export const Policy: MessageFns<Policy> = {
  encode(message: Policy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerType !== 0) {
      writer.uint32(8).int32(message.ownerType);
    }
    if (message.ownerId !== "") {
      writer.uint32(18).string(message.ownerId);
    }
    if (message.action !== 0) {
      writer.uint32(24).int32(message.action);
    }
    if (message.objectType !== 0) {
      writer.uint32(32).int32(message.objectType);
    }
    if (message.objectId !== "") {
      writer.uint32(42).string(message.objectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Policy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ownerType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.objectType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.objectId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Policy {
    return {
      ownerType: isSet(object.ownerType) ? policyOwnerFromJSON(object.ownerType) : 0,
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      action: isSet(object.action) ? policyActionFromJSON(object.action) : 0,
      objectType: isSet(object.objectType) ? policyObjectFromJSON(object.objectType) : 0,
      objectId: isSet(object.objectId) ? globalThis.String(object.objectId) : "",
    };
  },

  toJSON(message: Policy): unknown {
    const obj: any = {};
    if (message.ownerType !== 0) {
      obj.ownerType = policyOwnerToJSON(message.ownerType);
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.action !== 0) {
      obj.action = policyActionToJSON(message.action);
    }
    if (message.objectType !== 0) {
      obj.objectType = policyObjectToJSON(message.objectType);
    }
    if (message.objectId !== "") {
      obj.objectId = message.objectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Policy>, I>>(base?: I): Policy {
    return Policy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Policy>, I>>(object: I): Policy {
    const message = createBasePolicy();
    message.ownerType = object.ownerType ?? 0;
    message.ownerId = object.ownerId ?? "";
    message.action = object.action ?? 0;
    message.objectType = object.objectType ?? 0;
    message.objectId = object.objectId ?? "";
    return message;
  },
};

export type PolicyServiceService = typeof PolicyServiceService;
export const PolicyServiceService = {
  getPolicy: {
    path: "/intania.auth.policy.v1.PolicyService/GetPolicy",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPolicyRequest) => Buffer.from(GetPolicyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetPolicyRequest.decode(value),
    responseSerialize: (value: GetPolicyResponse) => Buffer.from(GetPolicyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetPolicyResponse.decode(value),
  },
  listPolicy: {
    path: "/intania.auth.policy.v1.PolicyService/ListPolicy",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListPolicyRequest) => Buffer.from(ListPolicyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListPolicyRequest.decode(value),
    responseSerialize: (value: ListPolicyResponse) => Buffer.from(ListPolicyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListPolicyResponse.decode(value),
  },
  editPolicy: {
    path: "/intania.auth.policy.v1.PolicyService/EditPolicy",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EditPolicyRequest) => Buffer.from(EditPolicyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EditPolicyRequest.decode(value),
    responseSerialize: (value: EditPolicyResponse) => Buffer.from(EditPolicyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => EditPolicyResponse.decode(value),
  },
  attachPolicy: {
    path: "/intania.auth.policy.v1.PolicyService/AttachPolicy",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AttachPolicyRequest) => Buffer.from(AttachPolicyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AttachPolicyRequest.decode(value),
    responseSerialize: (value: AttachPolicyResponse) => Buffer.from(AttachPolicyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AttachPolicyResponse.decode(value),
  },
} as const;

export interface PolicyServiceServer extends UntypedServiceImplementation {
  getPolicy: handleUnaryCall<GetPolicyRequest, GetPolicyResponse>;
  listPolicy: handleUnaryCall<ListPolicyRequest, ListPolicyResponse>;
  editPolicy: handleUnaryCall<EditPolicyRequest, EditPolicyResponse>;
  attachPolicy: handleUnaryCall<AttachPolicyRequest, AttachPolicyResponse>;
}

export interface PolicyServiceClient extends Client {
  getPolicy(
    request: GetPolicyRequest,
    callback: (error: ServiceError | null, response: GetPolicyResponse) => void,
  ): ClientUnaryCall;
  getPolicy(
    request: GetPolicyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPolicyResponse) => void,
  ): ClientUnaryCall;
  getPolicy(
    request: GetPolicyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPolicyResponse) => void,
  ): ClientUnaryCall;
  listPolicy(
    request: ListPolicyRequest,
    callback: (error: ServiceError | null, response: ListPolicyResponse) => void,
  ): ClientUnaryCall;
  listPolicy(
    request: ListPolicyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListPolicyResponse) => void,
  ): ClientUnaryCall;
  listPolicy(
    request: ListPolicyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListPolicyResponse) => void,
  ): ClientUnaryCall;
  editPolicy(
    request: EditPolicyRequest,
    callback: (error: ServiceError | null, response: EditPolicyResponse) => void,
  ): ClientUnaryCall;
  editPolicy(
    request: EditPolicyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EditPolicyResponse) => void,
  ): ClientUnaryCall;
  editPolicy(
    request: EditPolicyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EditPolicyResponse) => void,
  ): ClientUnaryCall;
  attachPolicy(
    request: AttachPolicyRequest,
    callback: (error: ServiceError | null, response: AttachPolicyResponse) => void,
  ): ClientUnaryCall;
  attachPolicy(
    request: AttachPolicyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AttachPolicyResponse) => void,
  ): ClientUnaryCall;
  attachPolicy(
    request: AttachPolicyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AttachPolicyResponse) => void,
  ): ClientUnaryCall;
}

export const PolicyServiceClient = makeGenericClientConstructor(
  PolicyServiceService,
  "intania.auth.policy.v1.PolicyService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PolicyServiceClient;
  service: typeof PolicyServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
